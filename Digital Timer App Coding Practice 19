Compoents Digital Timer...................................................................................................... 

Index.js 

// Write your code here

import './index.css'
import {Component} from 'react'

class DigitalTimer extends Component {
  constructor(props) {
    super(props)
    this.state = {min: 25, sec: 0, isStarted: false, increase: 25}
  }

  onDecrease = () => {
    this.setState(prvState => {
      const {isStarted} = prvState

      const obj = {
        increase: isStarted ? prvState.increase : prvState.increase - 1,
        min: isStarted ? prvState.min : prvState.increase - 1,
        sec: isStarted ? prvState.sec : 0,
      }

      return obj
    })
  }

  onReset = () => {
    this.setState(prvState => {
      const v = prvState.isStarted
      if (v) {
        clearInterval(this.intervelId)
      }

      return {min: 25, sec: 0, increase: 25, isStarted: false}
    })
  }

  onIncrease = () => {
    this.setState(prvState => {
      const {isStarted} = prvState

      const obj = {
        increase: isStarted ? prvState.increase : prvState.increase + 1,
        min: isStarted ? prvState.min : prvState.increase + 1,
        sec: isStarted ? prvState.sec : 0,
      }

      return obj
    })
  }

  onTouchOfPauseOrStart = () => {
    const {isStarted} = this.state

    if (!isStarted) {
      this.Mount()
    } else {
      clearInterval(this.intervelId)
    }

    this.setState(prvState => ({
      isStarted: !prvState.isStarted,
    }))
  }

  Mount = () => {
    // const {isStarted} = this.state
    console.log('compoent is called')

    this.intervelId = setInterval(this.onTick, 1000)
  }

  onTick = () => {
    this.setState(prvState => {
      const {min, sec} = prvState
      if (min === 0) {
        return {min: 0, sec: 0}
      }
      const mini = sec === 0 ? min - 1 : min
      const seco = sec === 0 ? 59 : sec - 1

      return {min: mini, sec: seco}
    })
  }

  render() {
    const {min, sec, isStarted, increase} = this.state

    const url = isStarted
      ? 'https://assets.ccbp.in/frontend/react-js/pause-icon-img.png'
      : 'https://assets.ccbp.in/frontend/react-js/play-icon-img.png'
    const altText = isStarted ? 'pause icon' : 'play icon'
    const paraText = isStarted ? 'Pause' : 'Start'

    const stringifiedMinutes = min > 9 ? min : `0${min}`

    // if the value of the minutes is less than 9(single digit) then the 0 will be attached in front of it to form a double-digit
    const stringifiedSeconds = sec > 9 ? sec : `0${sec}`

    return (
      <div className="bg">
        <h1 className="mainHeading">Digital Timer</h1>
        <div className="Cart">
          <div className="firstPartbg">
            <div className="displayTimeBlock">
              <h1 className="timeText">{`${stringifiedMinutes}:${stringifiedSeconds}`}</h1>
              <p className="aboutTimeText">
                {isStarted ? 'Running' : 'Paused'}
              </p>
            </div>
          </div>
          <div className="secondPart">
            <div className="firstPartOfActionButtons">
              <div className="firstPartOfActionButtonsStartOrPaused">
                <button
                  className="button firstPartOfActionButtonsPara"
                  data-testid="buttonforAction"
                  type="button"
                  onClick={this.onTouchOfPauseOrStart}
                >
                  <img
                    className="firstPartOfActionButtonsIcons"
                    alt={altText}
                    src={url}
                  />
                  {paraText}
                </button>
              </div>
              <div className="firstPartOfActionButtonsReset">
                <button
                  className="button firstPartOfActionButtonsPara"
                  data-testid="buttonforAction"
                  type="button"
                  onClick={this.onReset}
                >
                  <img
                    className="firstPartOfActionButtonsIcons"
                    alt="reset icon"
                    src="https://assets.ccbp.in/frontend/react-js/reset-icon-img.png"
                  />
                  Reset
                </button>
              </div>
            </div>
            <div className="SecondPartOfActionButtonsTop">
              <p className="secondPartHeading">Set Timer limit</p>
              <div className="SecondPartOfActionButtons">
                <button
                  type="button"
                  onClick={this.onDecrease}
                  className="SecondPartOfActionButtonsIcons"
                >
                  -
                </button>
                <p className="SecondPartOfActionpara">{increase}</p>
                <button
                  type="button"
                  onClick={this.onIncrease}
                  className="SecondPartOfActionButtonsIcons"
                >
                  +
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }
}

export default DigitalTimer



Index.css......................................................................................................................................................... 

/* Write your CSS here */

.bg {
  background-image: linear-gradient(#ffffff, #cffcf1);
  width: 100%;
  height: 100vh;
  text-align: center;
  padding: 20px;
}

.mainHeading {
  font-size: 35px;
  font-weight: bold;
}

.firstPartbg {
  background-image: url('https://assets.ccbp.in/frontend/react-js/digital-timer-elapsed-bg.png');
  width: 600px;
  height: 500px;
  background-position: center;
  display: grid;
  place-content: center;
}

.displayTimeBlock {
  background-color: white;
  border-radius: 100px;
  width: 180px;
  height: 180px;
  text-align: center;
}

.timeText {
  font-size: 40px;
  font-weight: 700;
  color: #00d9f5;
}

.aboutTimeText {
  font-size: 25px;
  font-weight: bold;
}

.firstPartOfActionButtons {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

.firstPartOfActionButtonsIcons {
  width: 30px;
  height: 30px;
}

.button {
  border: none;
  background-color: transparent;
}

.firstPartOfActionButtonsPara {
  padding-left: 10px;
  font-size: 25px;
  font-weight: 600;
}

.secondPartHeading {
  font-size: 15px;
  font-weight: bold;
}

.SecondPartOfActionButtonsIcons {
  border: none;
  background-color: transparent;
  font-weight: bold;
  font-size: 30px;
  margin: 5px;
}

.SecondPartOfActionpara {
  display: grid;
  place-content: center;
  border-radius: 3px;
  padding: 5px 20px;
  background-image: linear-gradient(#defafe, #00d9f5);
  font-size: 25px;
  font-weight: bold;
}

.SecondPartOfActionButtons {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-self: center;
}

.SecondPartOfActionButtonsTop {
  display: flex;
  flex-direction: column;

  justify-content: center;
}

.firstPartOfActionButtonsReset {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  margin-left: 20px;
}

.firstPartOfActionButtonsStartOrPaused {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
}

.secondPart {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-self: center;
}

.Cart {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

@media (min-width: 800px) {
  .Cart {
    flex-direction: row;
    justify-content: space-around;
  }

  .bg {
    padding: 50px;
  }

  .secondPartHeading {
    font-size: 20px;
  }
}
